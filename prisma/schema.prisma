// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  owner
  disabled
  deleted
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("https://raw.githubusercontent.com/UdaySagar-Git/attendenceCalculator/main/public/images/placeholder.jpg")
  password      String?
  role          Role?     @default(user)
  organisation  String?   @default("Personal")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokens Int @default(3)

  quizes Quiz[]
  points Points[]

  account Account[]

  friends   Friend[] @relation(name: "friends")
  friendsof Friend[] @relation(name: "friendsof")

  sentMessages     Message[] @relation(name: "SentMessages")
  receivedMessages Message[] @relation(name: "ReceivedMessages")

  notifications Notification[]

  plan            Plan?      
}

enum Plans {
  weekly
  monthly
  yearly
  none
}

model Plan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  duration  Plans    @default(none)
  startTime DateTime @default(now())
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user            User?       @relation(fields: [userId], references: [id])
  userId          String?     @db.ObjectId @unique
}

model Notification {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  message String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  readAt    DateTime?
  deletedAt DateTime?

  link String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @db.ObjectId
  friendUserId String  @db.ObjectId
  user         User    @relation(name: "friends", fields: [userId], references: [id])
  friendUser   User    @relation(name: "friendsof", fields: [friendUserId], references: [id])
  status       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendUserId])
  @@unique([friendUserId, userId])
}

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  message String

  sender   User   @relation(name: "SentMessages", fields: [senderId], references: [id])
  senderId String @db.ObjectId

  receiver   User   @relation(name: "ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String? @default("Quiz")
  questions   Json?
  createdBy   User?   @relation(fields: [createdByID], references: [id])
  createdByID String? @db.ObjectId

  createdAt DateTime @default(now())

  startTime DateTime? @default(now())
  endTime   DateTime?

  usersPoints Points[]
}

model Points {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  points Int    @default(0)
  Quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String @db.ObjectId

  stratedAt DateTime?
  endedAt   DateTime? @default(now())

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model DeletedUsers {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?
  name          String?
  username      String?
  email         String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role?
  organisation  String?
  createdAt     DateTime?
  updatedAt     DateTime?
  account       Account[]
  deletedAt     DateTime  @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  scope             String?
  session_state     String?
  expires_at        Int?

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  DeletedUsers   DeletedUsers? @relation(fields: [deletedUsersId], references: [id])
  deletedUsersId String?       @db.ObjectId

  @@unique([provider, providerAccountId])
}
